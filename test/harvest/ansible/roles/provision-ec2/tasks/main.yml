---

- name: "ensure instance_name_prefix is set"
  fail:
    msg: "instance_name_tag_prefix cannot be empty"
  when: instance_name_tag_prefix is not defined or (instance_name_tag_prefix | length) == 0

- name: "provision instance"
  shell: "aws ec2 run-instances --launch-template {{ item.launch_template }} --image-id {{ item.ami }} --instance-type {{ item.type }}  --subnet-id {{ subnet }} --tag-specifications 'ResourceType=instance,Tags=[{Key=Name,Value={{ instance_name_tag_prefix }}:{{ item.name }}}]'"
  loop: "{{ instances }}"
  register: run_instances

- name: "iterate run-instances results to gather all outputs in a single structure"
  set_fact:
    created_instances_ids: "{{ item.stdout | from_json | community.general.json_query('Instances[*].InstanceId') | flatten }}"
  loop: "{{ run_instances.results | list }}"
  register: created_instances_ids_results

- name: "register instances_ids"
  set_fact:
    created_instances_ids: "{{ created_instances_ids_results.results | map(attribute='ansible_facts') | map(attribute='created_instances_ids') | flatten }}"

- name: "wait until instances are running"
  shell: "aws ec2 wait instance-status-ok --instance-ids {{ created_instances_ids | join(' ') }}"

- name: "retrieve instances information"
  shell: "aws ec2 describe-instances --filters 'Name=tag:Name,Values={{ instance_name_tag_prefix }}:*' 'Name=instance-state-name,Values=running'"
  register: instances_information

- name: "register instances attributes"
  set_fact:
    registered_instances: "{{ (instances_information.stdout  | from_json) | community.general.json_query('Reservations[*].Instances[*].{InstanceId: InstanceId, ImageId: ImageId, PublicIpAddress: PublicIpAddress, Architecture: Architecture}') | list | flatten }}"
  register: all_registered_instances

- name: add ip address
  ansible.builtin.set_fact:
    instance_data:
      ami: "{{ item.1.ami }}"
      ip: "{{ item.0.PublicIpAddress }}"
      username: "{{ item.1.username }}"
      name: "{{ item.1.name }}"
      python_interpreter: "{{ item.1.python_interpreter }}"
  loop: "{{ registered_instances | product(instances) | list }}"
  when: item.0.ImageId == item.1.ami
  register: instances_data

- name: register instances information for harvest test inventory
  set_fact:
    instances_for_inventory: "{{ instances_data.results | selectattr('ansible_facts', 'defined') | map(attribute='ansible_facts') | map(attribute='instance_data') | list }}"

- name: create inventory
  template:
    src: inventory.ec2.j2
    dest: inventory.ec2
...