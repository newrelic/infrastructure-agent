name: Prerelease Windows

on:
  release:
    types:
      - prereleased
    tags:
      - '*'

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  GO_VERSION: '1.18'
  PFX_CERTIFICATE_BASE64: ${{ secrets.OHAI_PFX_CERTIFICATE_BASE64 }} # base64 encoded
  PFX_CERTIFICATE_DESCRIPTION: 'New Relic'
  PFX_PASSPHRASE:  ${{ secrets.OHAI_PFX_PASSPHRASE }}
  SNYK_TOKEN: ${{ secrets.CAOS_SNYK_TOKEN }}
  TAG: ${{ github.event.release.tag_name }}
  DOCKER_HUB_ID: ${{ secrets.OHAI_DOCKER_HUB_ID }}
  DOCKER_HUB_PASSWORD: ${{ secrets.OHAI_DOCKER_HUB_PASSWORD }}
  # required for GHA publish action, should be moved into optional
  GPG_PASSPHRASE: ${{ secrets.OHAI_GPG_PASSPHRASE }}
  GPG_PRIVATE_KEY_BASE64: ${{ secrets.OHAI_GPG_PRIVATE_KEY_BASE64 }} # base64 encoded
  SCHEMA_BRANCH: ${{ github.event.release.tag_name }}
  AWS_S3_BUCKET_NAME: "nr-downloads-ohai-staging"
  AWS_REGION: "us-east-1"

jobs:
  unit-test:
    uses: newrelic/infrastructure-agent/.github/workflows/component_windows_unit_test.yml@master

  # Keeping it as no component until we figure out how to pass env variables to component
  packaging:
    name: Create MSI & Upload into GH Release assets
    runs-on: windows-2019
    needs: [ unit-test ]
    env:
      GOPATH: ${{ github.workspace }}
    defaults:
      run:
        working-directory: src/github.com/newrelic/infrastructure-agent
    strategy:
      matrix:
        goarch: [ amd64, 386 ]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          path: src/github.com/newrelic/infrastructure-agent

      - name: Install Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{env.GO_VERSION}}

      - name: Get PFX certificate from GH secrets
        shell: bash
        run: printf "%s" "$PFX_CERTIFICATE_BASE64" | base64 -d - > wincert.pfx

      - name: Import PFX certificate
        shell: pwsh
        run: build\windows\scripts\import_certificates.ps1 -pfx_passphrase "$env:PFX_PASSPHRASE" -pfx_certificate_description "$env:PFX_CERTIFICATE_DESCRIPTION"

      - name: Build executables ${{ matrix.goarch }}
        shell: pwsh
        run: build\windows\build.ps1 -arch ${{ matrix.goarch }} -version ${{env.TAG}} -commit "$env:GITHUB_SHA"

      - name: Create MSI package ${{ matrix.goarch }}
        shell: pwsh
        run: build\windows\package_msi.ps1 -arch ${{ matrix.goarch }} -version ${{env.TAG}}

      - name: Create zip package ${{ matrix.goarch }}
        shell: pwsh
        run: build\windows\package_zip.ps1 -arch ${{ matrix.goarch }} -version ${{env.TAG}}

      - name: Upload MSI to GH
        shell: bash
        run: build/upload_artifacts_gh.sh

  publishing-to-s3:
    name: Publish windows artifacts into s3 staging bucket
    uses: newrelic/infrastructure-agent/.github/workflows/component_windows_publish.yml@master
    needs: [packaging]
    secrets:
      DOCKER_HUB_ID: ${{secrets.OHAI_DOCKER_HUB_ID}}
      DOCKER_HUB_PASSWORD: ${{secrets.OHAI_DOCKER_HUB_PASSWORD}}
      GPG_PASSPHRASE: ${{ secrets.OHAI_GPG_PASSPHRASE }}
      GPG_PRIVATE_KEY_BASE64: ${{ secrets.OHAI_GPG_PRIVATE_KEY_BASE64 }} # base64 encoded
      AWS_ACCESS_KEY_ID: ${{ secrets.OHAI_AWS_ACCESS_KEY_ID_STAGING }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.OHAI_AWS_SECRET_ACCESS_KEY_STAGING }}
      AWS_ROLE_ARN: ${{ secrets.OHAI_AWS_ROLE_ARN_STAGING }}
      AWS_ROLE_SESSION_NAME: ${{ secrets.OHAI_AWS_ROLE_SESSION_NAME_STAGING }}
    with:
      ACCESS_POINT_HOST: "staging"
      RUN_ID: ${{ github.run_id }}
      TAG: ${{ github.event.release.tag_name }}
      AWS_S3_BUCKET_NAME: "nr-downloads-ohai-staging"
      AWS_S3_LOCK_BUCKET_NAME: "onhost-ci-lock-staging"
      ASSETS_TYPE: "all"