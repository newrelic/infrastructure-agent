name: Prerelease Windows pipeline

on:
  release:
    types:
      - prereleased
    tags:
      - 'v*'

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  GO_VERSION: '1.14.4'
  PFX_CERTIFICATE_BASE64: ${{ secrets.OHAI_PFX_CERTIFICATE_BASE64 }} # base64 encoded
  PFX_CERTIFICATE_DESCRIPTION: 'New Relic'
  PFX_PASSPHRASE:  ${{ secrets.OHAI_PFX_PASSPHRASE }}
  SNYK_TOKEN: ${{ secrets.CAOS_SNYK_TOKEN }}
  TAG: ${{ github.event.release.tag_name }}

jobs:
  unit-test-windows:
    name: Windows unit tests
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v2

      - name: Install Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{env.GO_VERSION}}

      - name: Download deps
        run: go mod vendor

      - name: Running unit tests
        run: build\windows\test.ps1

  packaging-windows:
    name: Create MSI & Upload into GH Release assets
    runs-on: windows-2019
    needs: [ unit-test-windows ]
    env:
      GOPATH: ${{ github.workspace }}
    defaults:
      run:
        working-directory: src/github.com/newrelic/infrastructure-agent

    strategy:
      matrix:
        goarch: [ amd64, 386 ]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          path: src/github.com/newrelic/infrastructure-agent
      - name: Get PFX certificate from GH secrets
        shell: bash
        run: printf "%s" "$PFX_CERTIFICATE_BASE64" | base64 -d - > wincert.pfx
     
      - name: Import PFX certificate
        shell: pwsh
        run: build\windows\scripts\import_certificates.ps1 -pfx_passphrase "$env:PFX_PASSPHRASE" -pfx_certificate_description "$env:PFX_CERTIFICATE_DESCRIPTION"
      
      - name: Build executables ${{ matrix.goarch }}
        shell: pwsh
        run: build\windows\build.ps1 -arch ${{ matrix.goarch }} -version "$env:TAG" -commit "$env:GITHUB_SHA"
      
      - name: Create MSI package ${{ matrix.goarch }}
        shell: pwsh
        run: build\windows\package_msi.ps1 -arch ${{ matrix.goarch }} -version "$env:TAG"

      - name: Create zip package ${{ matrix.goarch }}
        shell: pwsh
        run: build\windows\package_zip.ps1 -arch ${{ matrix.goarch }} -version "$env:TAG"

      - name: Upload MSI to GH
        shell: bash
        run: build/upload_artifacts_gh.sh
