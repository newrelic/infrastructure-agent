name: ðŸš§ Test pre-release

# 2 copy of packaging and canaries jobs required to split workflow path, but keep in the same component to reuse other jobs
# - packaging-tests-linux & packaging-tests-windows are almost the same
# - canaries-linux & canaries-windows are almost the same


on:
  workflow_call:
    secrets:
      AWS_VPC_SUBNET:
        required: true

    inputs:
      TAG:
        required: true
        type: string
      PLATFORM:
        required: true
        type: string
      CANARIES:
        required: true
        type: boolean


env:
  AWS_ASSUME_ROLE: 'arn:aws:iam::018789649883:role/caos-pipeline-oidc'
  ANSIBLE_FORKS: 20

permissions:
  id-token: write

jobs:
  provision:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ env.AWS_ASSUME_ROLE }}
          aws-region: us-east-2

      - name: Provision instances Linux
        uses: ./.github/actions/external_runner
        with:
          aws_region: us-east-2
          container_make_target: "test/automated/provision PLATFORM=${{ inputs.PLATFORM }} ANSIBLE_FORKS=${{ env.ANSIBLE_FORKS }} ANSIBLE_INVENTORY_FILE=${{ inputs.PLATFORM }}-inventory.ec2"
          ecs_cluster_name: caos_prerelease
          task_definition_name: test-prerelease-td
          cloud_watch_logs_group_name: /ecs/test-prerelease
          cloud_watch_logs_stream_name: ecs/test-prerelease
          aws_vpc_subnet: ${{ secrets.AWS_VPC_SUBNET }}

  harvest-tests:
    needs: [ provision ]
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ env.AWS_ASSUME_ROLE }}
          aws-region: us-east-2

      - name: Launch harvest tests
        uses: ./.github/actions/external_runner
        with:
          aws_region: us-east-2
          container_make_target: "test/automated/harvest PLATFORM=${{ inputs.PLATFORM }} ANSIBLE_FORKS=${{ env.ANSIBLE_FORKS }} ANSIBLE_INVENTORY_FILE=${{ inputs.PLATFORM }}-inventory.ec2 TAG=${{ inputs.TAG }}"
          ecs_cluster_name: caos_prerelease
          task_definition_name: test-prerelease-td
          cloud_watch_logs_group_name: /ecs/test-prerelease
          cloud_watch_logs_stream_name: ecs/test-prerelease
          aws_vpc_subnet: ${{ secrets.AWS_VPC_SUBNET }}

  packaging-tests-linux:
    if: ${{ inputs.PLATFORM == 'linux' }}
    strategy:
      matrix:
        limit:
          - "linux_amd64"
          - "linux_arm64"

    needs: [ harvest-tests ]
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ env.AWS_ASSUME_ROLE }}
          aws-region: us-east-2

      - name: Launch packaging tests
        uses: ./.github/actions/external_runner
        with:
          aws_region: us-east-2
          container_make_target: "test/automated/packaging LIMIT=${{ matrix.limit }} PLATFORM=${{ inputs.PLATFORM }} ANSIBLE_FORKS=${{ env.ANSIBLE_FORKS }} ANSIBLE_INVENTORY_FILE=${{ inputs.PLATFORM }}-inventory.ec2 TAG=${{ inputs.TAG }}"
          ecs_cluster_name: caos_prerelease
          task_definition_name: test-prerelease-td
          cloud_watch_logs_group_name: /ecs/test-prerelease
          cloud_watch_logs_stream_name: ecs/test-prerelease
          aws_vpc_subnet: ${{ secrets.AWS_VPC_SUBNET }}

  packaging-tests-windows:
    if: ${{ inputs.PLATFORM == 'windows' }}
    needs: [ harvest-tests ]
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ env.AWS_ASSUME_ROLE }}
          aws-region: us-east-2

      - name: Launch packaging tests
        uses: ./.github/actions/external_runner
        with:
          aws_region: us-east-2
          container_make_target: "test/automated/packaging LIMIT=windows_amd64 PLATFORM=${{ inputs.PLATFORM }} ANSIBLE_FORKS=${{ env.ANSIBLE_FORKS }} ANSIBLE_INVENTORY_FILE=${{ inputs.PLATFORM }}-inventory.ec2 TAG=${{ inputs.TAG }}"
          ecs_cluster_name: caos_prerelease
          task_definition_name: test-prerelease-td
          cloud_watch_logs_group_name: /ecs/test-prerelease
          cloud_watch_logs_stream_name: ecs/test-prerelease
          aws_vpc_subnet: ${{ secrets.AWS_VPC_SUBNET }}

  canaries-linux:
    if: ${{ inputs.PLATFORM == 'linux' && inputs.CANARIES == true }}
    needs: [ packaging-tests-linux ]
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ env.AWS_ASSUME_ROLE }}
          aws-region: us-east-2

      - name: Provision canaries
        uses: ./.github/actions/external_runner
        with:
          aws_region: us-east-2
          container_make_target: "canaries PLATFORM=${{ inputs.PLATFORM }} ANSIBLE_FORKS=${{ env.ANSIBLE_FORKS }} VERSION=${{ inputs.TAG }}"
          ecs_cluster_name: caos_prerelease
          task_definition_name: test-prerelease-td
          cloud_watch_logs_group_name: /ecs/test-prerelease
          cloud_watch_logs_stream_name: ecs/test-prerelease
          aws_vpc_subnet: ${{ secrets.AWS_VPC_SUBNET }}

  canaries-macos:
    # leverage linux workflow as we don't have macos packaging tests yet
    if: ${{ inputs.PLATFORM == 'linux' && inputs.CANARIES == true }}
    needs: [ packaging-tests-linux ]
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ env.AWS_ASSUME_ROLE }}
          aws-region: us-east-2

      - name: Provision canaries
        uses: ./.github/actions/external_runner
        with:
          aws_region: us-east-2
          container_make_target: "canaries PLATFORM=macos ANSIBLE_FORKS=${{ env.ANSIBLE_FORKS }} VERSION=${{ inputs.TAG }}"
          ecs_cluster_name: caos_prerelease
          task_definition_name: test-prerelease-td
          cloud_watch_logs_group_name: /ecs/test-prerelease
          cloud_watch_logs_stream_name: ecs/test-prerelease
          aws_vpc_subnet: ${{ secrets.AWS_VPC_SUBNET }}

  canaries-windows:
    if: ${{ inputs.PLATFORM == 'windows' && inputs.CANARIES == true }}
    needs: [ packaging-tests-windows ]
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ env.AWS_ASSUME_ROLE }}
          aws-region: us-east-2

      - name: Provision canaries
        uses: ./.github/actions/external_runner
        with:
          aws_region: us-east-2
          container_make_target: "canaries PLATFORM=${{ inputs.PLATFORM }} ANSIBLE_FORKS=${{ env.ANSIBLE_FORKS }} VERSION=${{ inputs.TAG }}"
          ecs_cluster_name: caos_prerelease
          task_definition_name: test-prerelease-td
          cloud_watch_logs_group_name: /ecs/test-prerelease
          cloud_watch_logs_stream_name: ecs/test-prerelease
          aws_vpc_subnet: ${{ secrets.AWS_VPC_SUBNET }}

  canaries-prune:
    needs: [ canaries-linux, canaries-windows ]
    if: ${{ always() && inputs.CANARIES == true }}
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ env.AWS_ASSUME_ROLE }}
          aws-region: us-east-2

      - name: Prune old canaries
        uses: ./.github/actions/external_runner
        with:
          aws_region: us-east-2
          container_make_target: "canaries-prune-auto PLATFORM=linux"
          ecs_cluster_name: caos_prerelease
          task_definition_name: test-prerelease-td
          cloud_watch_logs_group_name: /ecs/test-prerelease
          cloud_watch_logs_stream_name: ecs/test-prerelease
          aws_vpc_subnet: ${{ secrets.AWS_VPC_SUBNET }}