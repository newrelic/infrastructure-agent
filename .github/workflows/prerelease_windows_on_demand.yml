name: . ðŸš€ ðŸªŸ ðŸ¦º Prerelease Windows On Demand

on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to build from'
        required: true
      fake_tag:
        description: 'Version to be given to the packages'
        default: '0.0.0'
      dest_prefix:
        description: 'Repo prefix'
        required: true
  push:
    branches:
      - 'prerelease-on-demand_*'


env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  PFX_CERTIFICATE_BASE64: ${{ secrets.OHAI_PFX_CERTIFICATE_BASE64 }} # base64 encoded
  PFX_CERTIFICATE_DESCRIPTION: 'New Relic'
  PFX_PASSPHRASE:  ${{ secrets.OHAI_PFX_PASSPHRASE }}
  SNYK_TOKEN: ${{ secrets.CAOS_SNYK_TOKEN }}
  FAKE_TAG:  ${{ inputs.fake_tag }}
  DOCKER_HUB_ID: ${{ secrets.OHAI_DOCKER_HUB_ID }}
  DOCKER_HUB_PASSWORD: ${{ secrets.OHAI_DOCKER_HUB_PASSWORD }}
  # required for GHA publish action, should be moved into optional
  GPG_PASSPHRASE: ${{ secrets.OHAI_GPG_PASSPHRASE }}
  GPG_PRIVATE_KEY_BASE64: ${{ secrets.OHAI_GPG_PRIVATE_KEY_BASE64 }} # base64 encoded
  BRANCH: ${{ inputs.branch }}
  DEST_PREFIX: ${{ inputs.dest_prefix }}
  AWS_S3_BUCKET_NAME: "nr-downloads-ohai-staging"
  AWS_REGION: "us-east-1"

jobs:
  # Keeping it as no component until we figure out how to pass env variables to component
  packaging:
    name: Create MSI & Upload into GHA workflow cache
    runs-on: windows-2019
    strategy:
      matrix:
        goarch: [ amd64, 386 ]
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ env.BRANCH }}

      - name: Install Go
        uses: actions/setup-go@v4
        with:
          go-version-file: 'go.mod'

      - name: Get PFX certificate from GH secrets
        shell: bash
        run: printf "%s" "$PFX_CERTIFICATE_BASE64" | base64 -d - > wincert.pfx

      - name: Import PFX certificate
        shell: pwsh
        run: build\windows\scripts\import_certificates.ps1 -pfx_passphrase "$env:PFX_PASSPHRASE" -pfx_certificate_description "$env:PFX_CERTIFICATE_DESCRIPTION"

      - name: Set date environment variable for buildDate metadata
        run: echo buildDate=$(date -u +"%Y-%m-%dT%H:%M:%SZ") >> $GITHUB_ENV
        shell: bash

      - name: Build executables ${{ matrix.goarch }}
        shell: pwsh
        run: build\windows\build.ps1 -arch ${{ matrix.goarch }} -version ${{env.FAKE_TAG}} -commit "$env:GITHUB_SHA" -date ${{env.buildDate}}

      - name: Create MSI package ${{ matrix.goarch }}
        shell: pwsh
        run: build\windows\package_msi.ps1 -arch ${{ matrix.goarch }} -version ${{env.FAKE_TAG}}

      - name: Create zip package ${{ matrix.goarch }}
        shell: pwsh
        run: build\windows\package_zip.ps1 -arch ${{ matrix.goarch }} -version ${{env.FAKE_TAG}}

      - name: Archive production artifacts
        uses: actions/upload-artifact@v2 #v3 just got released and was not working in windows
        with:
          name: windows-assets
          path: dist

  publish:
    name: Build and upload artifacts into GH Release assets
    runs-on: ubuntu-20.04
    needs: [ packaging ]
    strategy:
      matrix:
        assetsType:
          - "msi"
          - "zip"

    steps:
      - name: Download a single artifact
        uses: actions/download-artifact@v2
        with:
          name: windows-assets

      - name: Publish msi to S3 action
        uses: newrelic/infrastructure-publish-action@v1.2.6
        env:
          DOCKER_HUB_ID: ${{secrets.OHAI_DOCKER_HUB_ID}}
          DOCKER_HUB_PASSWORD: ${{secrets.OHAI_DOCKER_HUB_PASSWORD}}
          GPG_PASSPHRASE: ${{ secrets.OHAI_GPG_PASSPHRASE }}
          GPG_PRIVATE_KEY_BASE64: ${{ secrets.OHAI_GPG_PRIVATE_KEY_BASE64 }} # base64 encoded
          AWS_ACCESS_KEY_ID: ${{ secrets.OHAI_AWS_ACCESS_KEY_ID_STAGING }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.OHAI_AWS_SECRET_ACCESS_KEY_STAGING }}
          AWS_ROLE_ARN: ${{ secrets.OHAI_AWS_ROLE_ARN_STAGING }}
          AWS_ROLE_SESSION_NAME: ${{ secrets.OHAI_AWS_ROLE_SESSION_NAME_STAGING }}
          ACCESS_POINT_HOST: "staging"
          RUN_ID: ${{ github.run_id }}
          AWS_S3_BUCKET_NAME: "nr-downloads-ohai-staging"
          AWS_S3_LOCK_BUCKET_NAME: "onhost-ci-lock-staging"
        with:
          tag: ${{env.FAKE_TAG}}
          app_name: "newrelic-infra"
          repo_name: "newrelic/infrastructure-agent"
          schema: "custom"
          schema_url: "https://raw.githubusercontent.com/newrelic/infrastructure-agent/${{ env.BRANCH }}/build/upload-schema-windows-${{ matrix.assetsType }}.yml"
          aws_access_key_id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws_secret_access_key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws_s3_bucket_name: ${{ env.AWS_S3_BUCKET_NAME }}
          aws_s3_lock_bucket_name: ${{ env.AWS_S3_LOCK_BUCKET_NAME }}
          access_point_host: ${{ env.ACCESS_POINT_HOST }}
          run_id: ${{ env.RUN_ID }}
          aws_region: ${{ env.AWS_REGION }}
          aws_role_session_name: ${{ env.AWS_ROLE_SESSION_NAME }}
          aws_role_arn: ${{ env.AWS_ROLE_ARN }}
          # used for signing package stuff
          gpg_passphrase: ${{ env.GPG_PASSPHRASE }}
          gpg_private_key_base64: ${{ env.GPG_PRIVATE_KEY_BASE64 }}
          disable_lock: ${{ env.DISABLE_LOCK }}
          dest_prefix: ${{ env.DEST_PREFIX }}
          local_packages_path:  "/srv"
          apt_skip_mirror:  true
