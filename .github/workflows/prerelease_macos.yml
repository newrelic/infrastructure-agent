name: Prerelease macOS pipeline

on:
  release:
    types:
      - prereleased
    tags:
      - '*'

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  GO_VERSION: '1.14.4'
  SNYK_TOKEN: ${{ secrets.CAOS_SNYK_TOKEN }}
  TAG:  ${{ github.event.release.tag_name }}
  DOCKER_HUB_ID: ${{ secrets.OHAI_DOCKER_HUB_ID }}
  DOCKER_HUB_PASSWORD: ${{ secrets.OHAI_DOCKER_HUB_PASSWORD }}
  SCHEMA_BRANCH: ${{ github.event.release.tag_name }}
  # required for GHA publish action, should be moved into optional
  GPG_PASSPHRASE: ${{ secrets.OHAI_GPG_PASSPHRASE }}
  GPG_PRIVATE_KEY_BASE64: ${{ secrets.OHAI_GPG_PRIVATE_KEY_BASE64 }} # base64 encoded
  AWS_S3_BUCKET_NAME: "nr-downloads-ohai-staging"
  AWS_REGION: "us-east-1"

jobs:
  unit-test-macos:
    name: macOS unit tests
    runs-on: macos-11

    steps:
      - uses: actions/checkout@v2

      - name: Install Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{env.GO_VERSION}}

      - name: Running unit tests
        run: make test-coverage

      - name: Coveralls Parallel
        uses: coverallsapp/github-action@master
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          path-to-lcov: lcov.info
          flag-name: run-macos
          parallel: true

  harvest-test-macos:
    name: MacOS harvest tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ macos-11, macos-10.15 ]
    steps:
      - uses: actions/checkout@v2

      - name: Install Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{env.GO_VERSION}}

      - name: Running Harvest tests
        run: make macos/harvest-tests

  finish:
    name: Finish
    needs: [ unit-test-macos ]
    runs-on: ubuntu-latest
    steps:
      - name: Coveralls Finished
        uses: coverallsapp/github-action@master
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          parallel-finished: true

  packaging-macos:
    name: Build and upload all artifacts into GH Release assets
    runs-on: macos-11
    needs: [unit-test-macos]

    steps:
      - uses: actions/checkout@v2

      - name: Install Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{env.GO_VERSION}}

      - name: Install macos build dependencies
        shell: bash
        run: build/install_macos_dependencies.sh

      - name: Releasing macos packages
        run: make ci/prerelease/macos

  publishing-to-s3-macos:
    name: Publish macos artifacts into s3 staging bucket
    runs-on: ubuntu-20.04
    needs: [packaging-macos]

    strategy:
      max-parallel: 1
      matrix:
        assetsType:
          - "targz"

    steps:
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ env.DOCKER_HUB_ID }}
          password: ${{ env.DOCKER_HUB_PASSWORD }}
      - name: Publish ${{ matrix.assetsType }} to S3 action
        uses: newrelic/infrastructure-publish-action@v1.0.14
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.OHAI_AWS_ACCESS_KEY_ID_STAGING }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.OHAI_AWS_SECRET_ACCESS_KEY_STAGING }}
          AWS_ROLE_ARN: ${{ secrets.OHAI_AWS_ROLE_ARN_STAGING }}
          AWS_ROLE_SESSION_NAME: ${{ secrets.OHAI_AWS_ROLE_SESSION_NAME_STAGING }}
        with:
          tag: ${{env.TAG}}
          app_name: "newrelic-infra"
          repo_name: "newrelic/infrastructure-agent"
          schema: "custom"
          schema_url: "https://raw.githubusercontent.com/newrelic/infrastructure-agent/${{ env.SCHEMA_BRANCH }}/build/upload-schema-macos-${{ matrix.assetsType }}.yml"
          aws_access_key_id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws_secret_access_key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws_s3_bucket_name: ${{ env.AWS_S3_BUCKET_NAME }}
          access_point_host: "staging"
          run_id: ${{ github.run_id }}
          aws_region: ${{ env.AWS_REGION }}
          aws_role_session_name: ${{ env.AWS_ROLE_SESSION_NAME }}
          aws_role_arn: ${{ env.AWS_ROLE_ARN }}
          # used for signing package stuff
          gpg_passphrase: ${{ env.GPG_PASSPHRASE }}
          gpg_private_key_base64: ${{ env.GPG_PRIVATE_KEY_BASE64 }}
          disable_lock: true
