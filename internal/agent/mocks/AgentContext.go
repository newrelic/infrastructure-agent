// Copyright 2020 New Relic Corporation. All rights reserved.
// SPDX-License-Identifier: Apache-2.0
// Code generated by mockery v1.0.0. DO NOT EDIT.
package mocks

import (
	agent "github.com/newrelic/infrastructure-agent/internal/agent"
	config "github.com/newrelic/infrastructure-agent/pkg/config"

	entity "github.com/newrelic/infrastructure-agent/pkg/entity"

	hostname "github.com/newrelic/infrastructure-agent/pkg/sysinfo/hostname"

	ids "github.com/newrelic/infrastructure-agent/pkg/plugins/ids"

	mock "github.com/stretchr/testify/mock"

	sample "github.com/newrelic/infrastructure-agent/pkg/sample"
)

// AgentContext is an autogenerated mock type for the AgentContext type
type AgentContext struct {
	mock.Mock
}

// ActiveEntitiesChannel provides a mock function with given fields:
func (_m *AgentContext) ActiveEntitiesChannel() chan string {
	ret := _m.Called()

	var r0 chan string
	if rf, ok := ret.Get(0).(func() chan string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(chan string)
		}
	}

	return r0
}

// AddReconnecting provides a mock function with given fields: _a0
func (_m *AgentContext) AddReconnecting(_a0 agent.Plugin) {
	_m.Called(_a0)
}

// AgentIdentifier provides a mock function with given fields:
func (_m *AgentContext) AgentIdentifier() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// AgentIdentity provides a mock function with given fields:
func (_m *AgentContext) AgentIdentity() entity.Identity {
	ret := _m.Called()

	var r0 entity.Identity
	if rf, ok := ret.Get(0).(func() entity.Identity); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(entity.Identity)
	}

	return r0
}

// CacheServicePids provides a mock function with given fields: source, pidMap
func (_m *AgentContext) CacheServicePids(source string, pidMap map[int]string) {
	_m.Called(source, pidMap)
}

// Config provides a mock function with given fields:
func (_m *AgentContext) Config() *config.Config {
	ret := _m.Called()

	var r0 *config.Config
	if rf, ok := ret.Get(0).(func() *config.Config); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*config.Config)
		}
	}

	return r0
}

// GetServiceForPid provides a mock function with given fields: pid
func (_m *AgentContext) GetServiceForPid(pid int) (string, bool) {
	ret := _m.Called(pid)

	var r0 string
	if rf, ok := ret.Get(0).(func(int) string); ok {
		r0 = rf(pid)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func(int) bool); ok {
		r1 = rf(pid)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// HostnameResolver provides a mock function with given fields:
func (_m *AgentContext) HostnameResolver() hostname.Resolver {
	ret := _m.Called()

	var r0 hostname.Resolver
	if rf, ok := ret.Get(0).(func() hostname.Resolver); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(hostname.Resolver)
		}
	}

	return r0
}

// IDLookup provides a mock function with given fields:
func (_m *AgentContext) IDLookup() agent.IDLookup {
	ret := _m.Called()

	var r0 agent.IDLookup
	if rf, ok := ret.Get(0).(func() agent.IDLookup); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(agent.IDLookup)
		}
	}

	return r0
}

// Reconnect provides a mock function with given fields:
func (_m *AgentContext) Reconnect() {
	_m.Called()
}

// SendData provides a mock function with given fields: _a0
func (_m *AgentContext) SendData(_a0 agent.PluginOutput) {
	_m.Called(_a0)
}

// SendEvent provides a mock function with given fields: event, entityKey
func (_m *AgentContext) SendEvent(event sample.Event, entityKey entity.Key) {
	_m.Called(event, entityKey)
}

// Unregister provides a mock function with given fields: _a0
func (_m *AgentContext) Unregister(_a0 ids.PluginID) {
	_m.Called(_a0)
}

// Version provides a mock function with given fields:
func (_m *AgentContext) Version() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}
